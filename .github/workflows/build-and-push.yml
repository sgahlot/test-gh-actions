name: Build and push image

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch:

permissions:
  contents: write

env:
  REGISTRY: quay.io
  ORG: sgahlot
  IMAGE_PREFIX: aiobs

jobs:
  semantic-version:
    name: Generate semantic version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show branch and commit info
        run: |
          echo "::group::Repository Information"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Event: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "::endgroup::"

      - name: Calculate semantic version
        id: version
        run: |
          # Get the current version from Makefile as we are not creating git tags
          VERSION=$(grep "^VERSION.*=" Makefile | sed 's/VERSION.*= //' | head -1)
          if [ -z "$VERSION" ]; then
            VERSION="0.1.1"
            echo "No VERSION found in Makefile, using default: $VERSION"
          else
            echo "Current version from Makefile: $VERSION"
          fi
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Define regex patterns for version detection
          MAJOR_PATTERN="(BREAKING CHANGE:?|breaking:|\!:|major:)"
          MINOR_PATTERN="(feat:|feature:|add:|minor:)"
          PATCH_PATTERN="(patch|bugfix|fix|documentation)"

          # Get commit messages - use simple, robust approach
          # For merged PRs and manual dispatch, analyze recent commits
          # For push events, use the push range if available

          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            # Normal push event with valid before SHA
            if git cat-file -e "${{ github.event.before }}" 2>/dev/null; then
              COMMITS=$(git log --pretty=format:"%B" ${{ github.event.before }}..${{ github.event.after }})
            else
              # Fallback if before SHA is not available
              COMMITS=$(git log --pretty=format:"%B" -1)
            fi
          else
            # For merged PRs, workflow_dispatch, or initial commits
            # Get the most recent commit(s) - this is safe and always works
            if git log --oneline -1 >/dev/null 2>&1; then
              COMMITS=$(git log --pretty=format:"%B" -1)
            else
              # Handle completely empty repository
              COMMITS="Initial commit"
              echo "Warning: No git history found, using default commit message"
            fi
          fi

          # Get PR information for better version determination
          PR_TITLE=""
          PR_LABELS=""

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_TITLE='${{ github.event.pull_request.title }}'
            PR_LABELS='${{ join(github.event.pull_request.labels.*.name, ' ') }}'
          fi

          echo "Commit messages from current PR/push:"
          echo "$COMMITS"

          if [ -n "$PR_TITLE" ]; then
            echo "PR Title: $PR_TITLE"
            echo "PR Labels: $PR_LABELS"
          fi

          # Determine version bump and calculate new version
          # Check PR labels first (highest priority)
          if [ -n "$PR_LABELS" ] && echo "$PR_LABELS" | grep -qiE "$MAJOR_PATTERN"; then
            echo "Bump type determined: major (from PR labels)"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ -n "$PR_LABELS" ] && echo "$PR_LABELS" | grep -qiE "$MINOR_PATTERN"; then
            echo "Bump type determined: minor (from PR labels)"
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ -n "$PR_LABELS" ] && echo "$PR_LABELS" | grep -qiE "$PATCH_PATTERN"; then
            echo "Bump type determined: patch (from PR labels)"
            PATCH=$((PATCH + 1))
          # Check PR title
          elif [ -n "$PR_TITLE" ] && echo "$PR_TITLE" | grep -qiE "$MAJOR_PATTERN"; then
            echo "Bump type determined: major (from PR title)"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ -n "$PR_TITLE" ] && echo "$PR_TITLE" | grep -qiE "$MINOR_PATTERN"; then
            echo "Bump type determined: minor (from PR title)"
            MINOR=$((MINOR + 1))
            PATCH=0
          # Fall back to commit message analysis
          elif echo "$COMMITS" | grep -qiE "$MAJOR_PATTERN"; then
            echo "Bump type determined: major (from commit messages)"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMITS" | grep -qiE "$MINOR_PATTERN"; then
            echo "Bump type determined: minor (from commit messages)"
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            echo "Bump type determined: patch (default)"
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT


  update-versions:
    name: Update versions in Helm charts and Makefile
    runs-on: ubuntu-latest
    needs: [semantic-version]
    if: (github.event_name == 'push' && github.ref_name != 'main') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show branch and commit info
        run: |
          echo "::group::Repository Information"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Event: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "::endgroup::"

      - name: Update metrics-api values.yaml
        run: |
          sed -i 's|tag: .*|tag: ${{ needs.semantic-version.outputs.version }}|' deploy/helm/metrics-api/values.yaml

      - name: Update ui values.yaml
        run: |
          sed -i 's|tag: .*|tag: ${{ needs.semantic-version.outputs.version }}|' deploy/helm/ui/values.yaml

      - name: Update alerting values.yaml
        run: |
          sed -i 's|tag: .*|tag: ${{ needs.semantic-version.outputs.version }}|' deploy/helm/alerting/values.yaml

      - name: Update mcp-server values.yaml
        run: |
          sed -i 's|tag: .*|tag: ${{ needs.semantic-version.outputs.version }}|' deploy/helm/mcp-server/values.yaml

      - name: Update Makefile version
        run: |
          sed -i 's|VERSION ?= .*|VERSION ?= ${{ needs.semantic-version.outputs.version }}|' Makefile

      - name: Commit and push changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add deploy/helm/*/values.yaml Makefile
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update Helm chart versions and Makefile to ${{ needs.semantic-version.outputs.version }}"
            git push
          fi

